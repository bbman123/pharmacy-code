@layout AppLayout
@inject IRefererService RefererService
@page "/referers"
@using Shared.Enums
@attribute [Authorize]

<MudHidden Breakpoint="Breakpoint.MdAndUp" Invert>
	<MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="pt-4">
			<MudText Typo="Typo.h5">Manage Referers</MudText>
			<MudTooltip Text="New Referer" Duration="2000" Placement="Placement.Top">
				<MudFab Label="New Referer" DisableElevation="true" StartIcon="@Icons.Material.Filled.Add"
						OnClick="@(() => OnNew())" Color="Color.Primary" Size="Size.Small" />
			</MudTooltip>
		</MudStack>
	</MudHidden>

	<MudHidden Breakpoint="Breakpoint.MdAndUp">
		<MudStack AlignItems="AlignItems.Start" Class="pt-4" Spacing="1">
			<MudTooltip Text="New Referer" Duration="2000" Placement="Placement.Top">
				<MudFab Label="New Referer" DisableElevation="true" StartIcon="@Icons.Material.Filled.Add"
						OnClick="@(() => OnNew())" Color="Color.Primary" Size="Size.Small" />
			</MudTooltip>
			<MudText Typo="Typo.h5">Manage Referers</MudText>
		</MudStack>
	</MudHidden>

	<MudDataGrid @ref="_gridComponent"
				 T="Referer"
				 ServerData="GetGridData"
				 RowClick="@HandleSelectedDataItemChanged"
				 @bind-SelectedDataItem="category"
			 Outlined>
	<Columns>
		<PropertyColumn Title="Name" Property="x => x.RefererName" />
		<TemplateColumn Title="Type">
			<CellTemplate>
				@if (context.Item.Type == RefererType.Doctor)
				{
					<MudChip Size="Size.Small" Color="Color.Surface">Doctor</MudChip>
				}
				else
				{
					<MudChip Size="Size.Small" Color="Color.Tertiary">Escort</MudChip>
				}
			</CellTemplate>
		</TemplateColumn>
		<PropertyColumn Title="Date Created" Property="x => x.CreatedDate.ToString()" />
		<PropertyColumn Title="Date Modified" Property="@(x => (x.ModifiedDate.ToString()))" />
		<TemplateColumn>
			<CellTemplate>
				<MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OnEdit(context.Item)" Size="Size.Small">Edit</MudButton>
				<MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => OnDelete(context.Item.Id)" Size="Size.Small">Delete</MudButton>
			</CellTemplate>
		</TemplateColumn>
	</Columns>
	<NoRecordsContent>
		<MudText Typo="Typo.h6">Empty record</MudText>
	</NoRecordsContent>
	<PagerContent>
		<MudDataGridPager T="Referer" />
	</PagerContent>
</MudDataGrid>




@code {
	private MudDataGrid<Referer>? _gridComponent;
	private Referer? category = new();
	private EditContext? EditContext;

	protected override void OnInitialized()
	{
		AppState.OnUpdateLayout += UpdateComponent!;
		EditContext = new EditContext(category!);
		base.OnInitialized();
	}

	private async Task<GridData<Referer>> GetGridData(GridState<Referer> request)
	{
		var parameter = new PaginationParameter { Page = request.Page, PageSize = request.PageSize };
		var response = await RefererService.GetPagedReferers(parameter);
		return new GridData<Referer>()
			{
				Items = response!.Data!,
				TotalItems = response.TotalCount
			};
	}

	async Task HandleSelectedDataItemChanged(DataGridRowClickEventArgs<Referer> category)
	{
		await OnEdit(category.Item);
	}

	private async Task OnNew()
	{
		var parameters = new DialogParameters
			{
				["Referer"] = new Referer(),
				["IsEdit"] = false,
			};
		await Dialog.ShowAsync<RefererEntry>("", parameters);
	}

	private async Task OnEdit(Referer Referer)
	{
		var parameters = new DialogParameters
			{
				["Referer"] = Referer,
				["IsEdit"] = true,
			};
		await Dialog.ShowAsync<RefererEntry>("", parameters);
	}

	private async Task OnDelete(Guid id)
	{
		AppState.IsProcessing = true;
		var mode = await localStorage.GetItemAsync<bool>("mode");
		var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to delete", yesText: "Yes", cancelText: "No");
		if (prompt is null)
		{
			AppState.IsProcessing = false;
			return;
		}

		try
		{
			await RefererService.DeleteReferer(id);
			SnackBar.Add("Referer Successfully Deleted", Severity.Success);
			AppState.UpdateLayout();
		}
		catch (Exception ex)
		{
			Console.WriteLine(ex.Message);
			SnackBar.Add("Operation failed", Severity.Warning);
		}
		finally
		{
			AppState.IsProcessing = false;
		}
	}


	private async Task Save()
	{
		// AppState.IsProcessing = true
		var response = await Dialog.ShowMessageBox("Confirm", "Do you want to save...?");
		if (response is null)
		{
			return;
		}
		Console.Write("Confirmation working");

		SnackBar.Add("Saved");
	}

	private async void UpdateComponent(object sender, EventArgs e)
	{
		await _gridComponent!.ReloadServerData();
		StateHasChanged();
	}

	public void Dispose()
	{
		AppState.OnUpdateLayout -= UpdateComponent!;
	}

}
