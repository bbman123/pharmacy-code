@attribute [Authorize]
@inject IOrderService OrderService
@inject IStoreService StoreService
@implements IAsyncDisposable

<MudDataGrid @ref="_gridComponent"
             T="OrderWithData"
             ServerData="GetGridData"
             RowClick="@HandleSelectedDataItemChanged"
             @bind-SelectedDataItem="data"
              Dense
              Outlined>
    <ToolBarContent>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Immediate="true"
                      Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>        
        <PropertyColumn Property="x => x.ReceiptNo" Title="#" />
        <PropertyColumn Property="x => x.Date" Title="Date" Format="dd/MM/yyyy" />        
        <PropertyColumn Property="x => x.CustomerName" Title="Customer" />
        <PropertyColumn Property="x => x.TotalAmount" Title="Total" Format="N2" />
        @* <PropertyColumn Property="x => x.ModifiedDate" Title="Modified Date" /> *@
        <TemplateColumn>
            <CellTemplate>
                @if (context.Item.Status == Shared.Enums.TestStatus.Pending)
                {
                    <MudChip Size="Size.Small" Color="Color.Warning">Pending</MudChip>
                }
                else
                {
                    <MudChip Size="Size.Small" Color="Color.Tertiary">Completed</MudChip>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                <MudButton StartIcon="@Icons.Material.Filled.Search" Color="Color.Primary" OnClick="() => OnExpand(context.Item.Id)" Size="Size.Small">Edit</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Print" Color="Color.Info" OnClick="() => Print(context.Item.Id)" Size="Size.Small">Print</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.h6">No records found</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudDataGridPager T="OrderWithData" />
    </PagerContent>
</MudDataGrid>

@code {
    private MudDataGrid<OrderWithData>? _gridComponent;
    private OrderWithData? data;
    private string searchString = "";
    [Parameter]
    public EventHandler? OnUpdate { get; set; }


    private HubConnection? hub;
    protected override async Task OnInitializedAsync()
    {
        var builder = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs"), option =>
        {
            option.AccessTokenProvider = () => Task.FromResult(AppState.Token)!;
        }).WithStatefulReconnect();
        builder.Services.Configure<HubConnectionOptions>(o => o.StatefulReconnectBufferSize = 1000);
        hub = builder.Build();
        await hub.StartAsync();
        hub.On("UpdateLabOrders", async () =>
        {
            await _gridComponent!.ReloadServerData();
        });        
    }


    private async Task<GridData<OrderWithData>> GetGridData(GridState<OrderWithData> request)
    {
        var parameter = new PaginationParameter { FilterId = AppState.GlobalID, Page = request.Page, PageSize = request.PageSize };
        var response = await OrderService.GetOrderByStore(AppState.SelectedOption!, parameter);
        return new GridData<OrderWithData>()
        {
            Items = response!.Data!,
            TotalItems = response.TotalCount
        };
    }


    // async Task GetData(Guid id)
    // {
    //     PaginationParameter parameter = new PaginationParameter{ FilterId = id, }
    //     Orders = await OrderService.GetOrderByStore(StoreID);
    // }

    void HandleSelectedDataItemChanged(DataGridRowClickEventArgs<OrderWithData> item)
    {
        OnExpand(item.Item.Id);
    }

    async Task ReloadServerData()
    {
        await _gridComponent!.ReloadServerData();
        StateHasChanged();
    }

    void OnExpand(Guid id)
    {
        nav.NavigateTo($"lab/{id}");
    }

    async Task Print(Guid id)
    {
        AppState.IsProcessing = true;
        // var report = await OrderService.GetReportData(id);
        // await OrderService.GetReceipt(report);
        await Task.Delay(100);
        AppState.IsProcessing = false;
    }

    public async ValueTask DisposeAsync()
    {        
        await hub!.DisposeAsync();
    }

}
