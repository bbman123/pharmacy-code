@inject IProductService ItemService
@implements IAsyncDisposable

<EditForm Model="Stock" OnValidSubmit="Save">
    <DataAnnotationsValidator />
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">@(IsEdit ? "Update" : "Add") Stock</MudText>
        </TitleContent>
        <DialogContent>
            <MudGrid>      
                <MudItem xs="12" sm="6">
                    <MudTextField @bind-Value="Product!.Item!.Category!.CategoryName" ReadOnly Label="Category" Variant="Variant.Outlined"></MudTextField>
                 </MudItem>
                 <MudItem xs="12" sm="6">
                     <MudTextField @bind-Value="Product!.Item!.ProductName" ReadOnly Label="Product Name" Variant="Variant.Outlined"></MudTextField>
                 </MudItem>                 
                 <MudItem xs="12" sm="6">
                     <MudTextField Value="@(Product!.StocksOnHand + Stock!.Quantity)" Label="Current Stock" Variant="Variant.Outlined"></MudTextField>
                 </MudItem>
                 <MudItem xs="12" sm="6">
                     <MudNumericField @bind-Value="Stock!.Quantity" Immediate="true" Label="New Stock" Variant="Variant.Outlined"></MudNumericField>
                 </MudItem>
             </MudGrid>
         </DialogContent>
         <DialogActions>
             <MudButton OnClick="Close">Close</MudButton>
             <MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
                        Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
         </DialogActions>
     </MudDialog>

 </EditForm>

 @code {
    [CascadingParameter]
    public MudDialogInstance? DialogInstance { get; set; }
    [Parameter]
    public Stock? Stock { get; set; }
    [Parameter]
    public Product? Product { get; set; }
    [Parameter]
    public bool IsEdit { get; set; } = false;


    private HubConnection? hub;
    protected override async Task OnInitializedAsync()
    {
        hub = new HubConnectionBuilder().WithUrl(nav.ToAbsoluteUri("/hubs"), option =>
        {
            option.AccessTokenProvider = () => Task.FromResult(AppState.Token)!;
        }).WithStatefulReconnect().Build();
        await hub.StartAsync();
    }


    void Close() => DialogInstance?.Close(DialogResult.Ok(true));

    private async Task Save()
    {
        AppState.IsProcessing = true;
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to save", yesText: "Yes", cancelText: "No");
        if (prompt is null)
        {
            AppState.IsProcessing = false;
            return;
        }
        try
        {
            bool result = false;
            var currentDateTime = DateTime.Now;
            Product!.ModifiedDate = currentDateTime;
            Stock!.Date = currentDateTime;
            result = await ItemService.EditProduct(Product);
            // if (!IsEdit)
            // else
            // {
            //     Product!.Stocks.Where(x => x.Date == Stock!.Date).
            // }

            if (!result)
            {
                SnackBar.Add("Operation failed", Severity.Warning);
            }
            else
            {
                await hub!.SendAsync("UpdateItem");
                SnackBar.Add("Stock Successfully Updated", Severity.Success);
                Close();
            }
        }
        catch (Exception)
        {

            throw;
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
    public async ValueTask DisposeAsync()
    {        
        await hub!.DisposeAsync();
    }
}
