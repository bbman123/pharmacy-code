@using Client.Handlers
@using Shared.Enums
@inject IChargeService Service

<EditForm Model="@Data" OnValidSubmit="Save">
	<DataAnnotationsValidator/>
	<MudDialog>
		<TitleContent>
			<MudText Typo="Typo.h6">@(IsEdit ? "Update" : "Add") Charge</MudText>
		</TitleContent>
		<DialogContent>
			<MudTextField @ref="_TxtName" @bind-Value="Data.ChargeName" Margin="Margin.Dense"  Label="Name" Variant="Variant.Outlined" For="@(() => Data.ChargeName)" />
			<MudTextField @bind-Value="Data.Rate" Format="N2" Label="Cost" Margin="Margin.Dense" Variant="Variant.Outlined" For="@(() => Data.Rate)" />
			<MudSelect Dense="true" AnchorOrigin="Origin.BottomCenter" Margin="Margin.Dense" Strict="true" Label="Referer" @bind-Value="@Data.Type" Variant="Variant.Outlined">
				@foreach (RefererType type in Enum.GetValues(typeof(RefererType)))
				{
					<MudSelectItem Value="@type">@type.ToString()</MudSelectItem>
				}
			</MudSelect>
		</DialogContent>
		<DialogActions>
			<MudButton OnClick="Close">Close</MudButton>
			<MudButton Disabled="AppState.IsProcessing" ButtonType="ButtonType.Submit" Variant="Variant.Filled"
					   Color="Color.Primary">@(AppState.IsProcessing ? "Processing" : "Save")</MudButton>
		</DialogActions>
	</MudDialog>	
</EditForm>

@code {
	[CascadingParameter]
	public MudDialogInstance? DialogInstance { get; set; }	
	[Parameter]
	public Charge Data { get; set; } = new();
	[Parameter]
	public bool IsEdit { get; set; } = false;

	MudTextField<string?>? _TxtName { get; set; }

	void Close() => DialogInstance?.Close(DialogResult.Ok(true));

	private async Task Save()
	{
		AppState.IsProcessing = true;
		var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to save", yesText: "Yes", cancelText: "No");
		if (prompt is null)
		{
			AppState.IsProcessing = false;
			return;
		}

		try
		{
			Data!.ChargeName = StringConverter.ConvertToTitleCase(Data!.ChargeName!);
			if (!IsEdit)
				await Service.AddCharge(Data!);
			else
				await Service.EditCharge(Data!);

			SnackBar.Add("Charge Successfully Updated", Severity.Success);
			AppState.UpdateLayout();
			await ClearControls();
		}
		catch (Exception)
		{
			SnackBar.Add("Failed to save", Severity.Error);
			throw;
		}
		AppState.IsProcessing = false;
	}	

	async Task ClearControls()
	{
		if (!IsEdit)
			Data.Id = Guid.NewGuid();
		Data.ChargeName = "";
		await _TxtName!.FocusAsync();
	}


}
