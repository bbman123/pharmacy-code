@inject ILabService LabService


<MudDataGrid Items="Data!" Loading="@IsLoading" Dense="true" Outlined="true">
    <Columns>
        <PropertyColumn Property="x => x.TestName" Title="Name" />
        <PropertyColumn Property="x => x.Unit" />
        <PropertyColumn Property="x => x.Range"/>
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OnEdit(context.Item)" Size="Size.Small">Edit</MudButton>
                <MudButton StartIcon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => OnDelete(context.Item)" Size="Size.Small">Delete</MudButton>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.h6">Empty record</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudDataGridPager DisableRowsPerPage T="LabTestResult" />
     </PagerContent>
 </MudDataGrid>

 @code {
    [Parameter]
    public Guid id { get; set; }
    [Parameter]
    public List<LabTestResult> Data { get; set; } = new();
    [Parameter]
    public bool IsLoading { get; set; }


    private void OnEdit(LabTestResult result)
    {
        AppState.UpdateResult(result);
    }

    async Task OnDelete(LabTestResult result)
    {        
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to delete", yesText: "Yes", cancelText: "No");
        if (prompt is null)
        {
            AppState.IsProcessing = false;
            return;
        }

        try
        {
            Data!.Remove(result);
            await LabService.UpdateFindings(id, Data!);
            SnackBar.Add("Item Successfully Delete", Severity.Success);
            AppState.UpdateLayout();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            SnackBar.Add("Error occurred", Severity.Error);
        }
    }
}
