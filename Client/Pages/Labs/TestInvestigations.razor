@using Shared.Enums
<MudDataGrid Items="Data!.OrderByDescending(x => x.ModifiedDate)" Loading="@IsLoading" Dense="true" Outlined="true">
    <Columns>
        <PropertyColumn Property="x => x.OrderDate" Title="Date" />
        <PropertyColumn Property="x => x.Customer!.CustomerName" Title="Customer" />
        <PropertyColumn Property="x => x.Customer!.PhoneNo" Title="Contact" />
        <PropertyColumn Property="x => x.Status" Title="Status" />
        <TemplateColumn Title="Status">
            <CellTemplate>
                @if (context.Item.Status == TestStatus.Completed)
                {
                    <MudChip Size="Size.Small" Color="Color.Tertiary">Completed</MudChip>
                }
                else
                {
                    <MudChip Size="Size.Small" Color="Color.Warning">Pending</MudChip>                    
                }
            </CellTemplate>
        </TemplateColumn>        
        <PropertyColumn Property="x => x.ModifiedDate" Title="Date Modified" />        
        <TemplateColumn CellClass="d-flex justify-end">
            <CellTemplate>
                @if (context.Item.Status == TestStatus.Pending)
                {
                    <MudButton StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="() => OnEdit(context.Item)" Size="Size.Small">Edit</MudButton>                    
                }                
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <NoRecordsContent>
        <MudText Typo="Typo.h6">Empty record</MudText>
    </NoRecordsContent>
    <PagerContent>
        <MudDataGridPager DisableRowsPerPage T="LabOrder" />
     </PagerContent>
 </MudDataGrid>

 @code {
    [Parameter]
    public List<LabOrder>? Data { get; set; } = [];
    [Parameter]
    public bool IsLoading { get; set; }

    private void OnEdit(LabOrder account)
    {        
    }

    private async Task OnDelete(Guid id)
    {
        AppState.IsProcessing = true;
        var mode = await localStorage.GetItemAsync<bool>("mode");
        var prompt = await Dialog.ShowMessageBox("Confirmation", "Do you really wish to delete", yesText: "Yes", cancelText: "No");
        if (prompt is null)
        {
            AppState.IsProcessing = false;
            return;
        }

        try
        {            
            SnackBar.Add("Sub Account Successfully Deleted", Severity.Success);
            AppState.UpdateLayout();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            SnackBar.Add("Operation failed", Severity.Warning);
        }
        finally
        {
            AppState.IsProcessing = false;
        }
    }
}
